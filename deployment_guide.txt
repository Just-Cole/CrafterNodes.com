
# Ubuntu Server Deployment Guide for Next.js Application

This guide provides the necessary commands to deploy your Next.js application on a fresh Ubuntu server.

**Prerequisites:**
- An Ubuntu 22.04 server.
- A domain name pointing to your server's IP address.
- You are logged in as a user with sudo privileges.

# --------------------------------------------------
# Step 1: Update Server and Install Dependencies
# --------------------------------------------------

# Update package lists
sudo apt update && sudo apt upgrade -y

# Install Nginx (web server), Git (for pulling code), and UFW (firewall)
sudo apt install -y nginx git ufw

# --------------------------------------------------
# Step 2: Install Node.js and PM2
# --------------------------------------------------

# We will use NodeSource to install a modern version of Node.js (e.g., Node.js 20.x)
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y nodejs

# Verify installation
node -v
npm -v

# Install PM2, a process manager for Node.js applications.
# This will keep your app running forever and restart it if it crashes.
sudo npm install pm2 -g

# --------------------------------------------------
# Step 3: Install and Configure MariaDB
# --------------------------------------------------

# 1. Install the MariaDB server package
sudo apt install -y mariadb-server

# 2. Run the secure installation script.
# This will guide you through setting a root password, removing anonymous users,
# and other important security settings. This step is highly recommended.
sudo mysql_secure_installation
# --- Prompts and Recommended Answers: ---
# - Enter current password for root (enter for none): Press Enter (there is no password yet)
# - Set root password? [Y/n]: Y, then enter a strong password twice.
# - Remove anonymous users? [Y/n]: Y
# - Disallow root login remotely? [Y/n]: Y
# - Remove test database and access to it? [Y/n]: Y
# - Reload privilege tables now? [Y/n]: Y

# 3. Log in to MariaDB as the root user to set up your database.
# You will be prompted for the root password you just created.
sudo mysql -u root -p

# --- Run the following commands inside the MariaDB prompt ---

# 1. Create a database for your application.
CREATE DATABASE crafternodes;

# 2. Create a dedicated user for your application.
#    Replace 'your_strong_password' with the password you want for this user.
#    This user will initially only be able to connect from the server itself.
CREATE USER 'crafteruser'@'localhost' IDENTIFIED BY 'your_strong_password';

# 3. Grant the new user privileges on your application's database.
GRANT ALL PRIVILEGES ON crafternodes.* TO 'crafteruser'@'localhost';

# 4. Apply the changes.
FLUSH PRIVILEGES;

# 5. Exit the MariaDB prompt.
EXIT;

# --- End of MariaDB prompt commands ---


# --------------------------------------------------
# Step 4: Enabling Remote Database Access (for HeidiSQL)
# --------------------------------------------------

# By default, your database only allows connections from your VPS itself.
# To connect with a tool like HeidiSQL from your home computer, you must
# enable remote access.

# 1. Allow MariaDB to listen on all IP addresses.
#    Open the configuration file with a text editor:
sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf

#    Inside the file, find the line that says `bind-address = 127.0.0.1` and
#    put a `#` at the beginning to comment it out. It should look like this:
#    #bind-address = 127.0.0.1
#    Save the file and exit (Ctrl+X, then Y, then Enter).

# 2. Grant remote privileges to your user.
#    Log back into MariaDB as the root user.
sudo mysql -u root -p

#    --- Run the following command inside the MariaDB prompt ---
#    This command allows your 'crafteruser' to connect from any IP address ('%').
#    Replace 'your_strong_password' with the SAME password you set for the user in Step 3.
GRANT ALL PRIVILEGES ON crafternodes.* TO 'crafteruser'@'%' IDENTIFIED BY 'your_strong_password';
FLUSH PRIVILEGES;
EXIT;
#    --- End of MariaDB prompt commands ---

# 3. Open the firewall port for MariaDB.
sudo ufw allow 3306/tcp

# 4. Restart MariaDB to apply all the configuration changes.
sudo systemctl restart mariadb

# At this point, your database is configured for remote connections.
# You can now use HeidiSQL with your VPS IP, 'crafteruser', and your password.

# --------------------------------------------------
# Step 5: Create Application Tables
# --------------------------------------------------

# Now that you can connect with HeidiSQL, you must create the tables for the app.
# 1. Connect to your database using HeidiSQL.
# 2. Open the "Query" tab.
# 3. Copy and paste the SQL commands below into the query window and run them.

CREATE TABLE `games` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `image` varchar(255) NOT NULL,
  `hint` varchar(255) NOT NULL,
  `pterodactylNestId` int(11) NOT NULL,
  `pterodactylEggId` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `plans` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `game_id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `price` varchar(255) NOT NULL,
  `priceId` varchar(255) DEFAULT NULL,
  `features` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`features`)),
  `icon` varchar(255) DEFAULT NULL,
  `popular` tinyint(1) DEFAULT 0,
  PRIMARY KEY (`id`),
  KEY `game_id` (`game_id`),
  CONSTRAINT `plans_ibfk_1` FOREIGN KEY (`game_id`) REFERENCES `games` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


# --------------------------------------------------
# Step 6: Clone and Build Your Application
# --------------------------------------------------

# Clone your project from your Git repository
git clone https://github.com/Just-Cole/CrafterNodes.com.git
cd CrafterNodes.com

# Install project dependencies
npm install

# Build your Next.js app for production
npm run build

# Create a .env.local file for your production environment variables
# IMPORTANT: You must fill this file with your actual secrets.
cat > .env.local << EOF
# Database
# Use the credentials for the 'crafteruser' you created in Step 3.
# The format is: mysql://user:password@host:port/database
# Example: DATABASE_URL="mysql://crafteruser:your_strong_password@127.0.0.1:3306/crafternodes"
# NOTE: The host is 127.0.0.1 because the app is running on the same server as the database.
DATABASE_URL="your_database_connection_string"

# SteamGridDB
STEAMGRIDDB_API_KEY=your_steamgriddb_api_key

# Pterodactyl Environment Variables
PTERODACTYL_PANEL_URL=https://your.pterodactyl.panel
PTERODACTYL_API_KEY=your_pterodactyl_application_api_key

# Stripe Environment Variables
STRIPE_SECRET_KEY=your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key

# NextAuth Environment Variables
NEXTAUTH_SECRET=generate_a_strong_secret_here # You can generate one with `openssl rand -base64 32`
NEXTAUTH_URL=https://your-domain.com

# Discord OAuth Environment Variables
DISCORD_CLIENT_ID=your_discord_client_id
DISCORD_CLIENT_SECRET=your_discord_client_secret
EOF

# --------------------------------------------------
# Step 7: Run the Application with PM2
# --------------------------------------------------

# Start the Next.js application using PM2.
# This will start the app on port 3000 by default.
pm2 start npm --name "next-app" -- start

# Tell PM2 to start on system boot
pm2 startup
# (You will need to run the command PM2 gives you here)

# Save the current process list
pm2 save

# --------------------------------------------------
# Step 8: Configure Nginx as a Reverse Proxy
# --------------------------------------------------

# Create a new Nginx configuration file for your site.
# Replace 'your-domain.com' with your actual domain name.
sudo nano /etc/nginx/sites-available/your-domain.com

# Paste the following configuration into the file.
# This tells Nginx to listen for traffic on port 80 and forward it
# to your Next.js app running on port 3000.
#
# Again, replace 'your-domain.com' with your actual domain.

server {
    listen 80;
    server_name your-domain.com www.your-domain.com;

    location / {
        proxy_pass http://localhost:3000;
        proxy__version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}


# Enable the new configuration by creating a symbolic link
sudo ln -s /etc/nginx/sites-available/your-domain.com /etc/nginx/sites-enabled/

# Test the Nginx configuration for syntax errors
sudo nginx -t

# Restart Nginx to apply the changes
sudo systemctl restart nginx

# --------------------------------------------------
# Step 9: Configure Firewall
# --------------------------------------------------

# Allow OpenSSH
sudo ufw allow 'OpenSSH'

# Allow Nginx HTTP traffic
sudo ufw allow 'Nginx Full'

# Enable the firewall
sudo ufw enable
# (Press 'y' to confirm)

# --------------------------------------------------
# Step 10: Secure Your Site with SSL (Let's Encrypt)
# --------------------------------------------------

# Install Certbot, the client for Let's Encrypt
sudo apt install -y certbot python3-certbot-nginx

# Obtain and install the SSL certificate.
# Certbot will automatically edit your Nginx configuration to handle HTTPS.
# Replace 'your-domain.com' with your domain.
sudo certbot --nginx -d your-domain.com -d www.your-domain.com

# Certbot will ask for your email and to agree to the terms of service.
# It will then automatically configure SSL.

# Your site should now be live and accessible via HTTPS!
# You can check the status of the certbot renewal timer with:
sudo systemctl status certbot.timer

# --------------------------------------------------
# Step 11: Updating Your Application
# --------------------------------------------------

# When you make changes to your application and push them to your GitHub repository,
# you'll need to pull those changes down to your server to make them live.

# First, connect to your server and navigate to your project directory:
cd ~/CrafterNodes.com

# Pull the latest changes from the 'main' branch (or whichever branch you use)
git pull

# Install any new dependencies that might have been added
npm install

# Re-build the application with the new changes
npm run build

# Restart the application using PM2 to apply the changes
pm2 restart next-app

# You can check the status of your application with:
pm2 status

# --------------------------------------------------
# How to Uninstall
# --------------------------------------------------

# This section provides the steps to remove the application and its components from your server.
# Run these commands from your server's terminal.

# 1. Stop and remove the application from PM2
pm2 stop next-app
pm2 delete next-app
pm2 save

# 2. Remove the PM2 startup service
pm2 unstartup

# 3. Remove the Nginx configuration
#    Replace 'your-domain.com' with your actual domain name.
sudo rm /etc/nginx/sites-enabled/your-domain.com
sudo rm /etc/nginx/sites-available/your-domain.com
sudo systemctl restart nginx

# 4. Remove the SSL certificate
#    Replace 'your-domain.com' with your actual domain name.
sudo certbot delete --cert-name your-domain.com

# 5. Remove the application files
#    Navigate out of the project directory first.
cd ~
rm -rf CrafterNodes.com

# 6. Revert firewall changes
sudo ufw delete allow 'Nginx Full'
sudo ufw delete allow 3306/tcp

# 7. Remove the database and user
#    Log in to MariaDB as the root user.
sudo mysql -u root -p

#    --- Run the following commands inside the MariaDB prompt ---
DROP DATABASE crafternodes;
DROP USER 'crafteruser'@'localhost';
DROP USER 'crafteruser'@'%'; # This command will only work if you enabled remote access
FLUSH PRIVILEGES;
EXIT;
#    --- End of MariaDB prompt commands ---

# 8. (Optional) Uninstall the main packages
#    If you no longer need Nginx, Node.js, or MariaDB for any other applications,
#    you can remove them.
# sudo apt purge -y nginx nginx-common certbot python3-certbot-nginx
# sudo apt purge -y nodejs
# sudo apt purge -y mariadb-server
# sudo npm uninstall -g pm2
# sudo apt autoremove -y

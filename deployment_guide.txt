
# Ubuntu Server Deployment Guide for Next.js Application

This guide provides the necessary commands to deploy your Next.js application on a fresh Ubuntu server.

**Prerequisites:**
- An Ubuntu 22.04 server.
- A domain name pointing to your server's IP address.
- You are logged in as a user with sudo privileges.

# --------------------------------------------------
# Step 1: Update Server and Install Dependencies
# --------------------------------------------------

# Update package lists and upgrade existing packages
sudo apt update && sudo apt upgrade -y

# Install Nginx (web server), Git (for pulling code), and UFW (firewall)
sudo apt install -y nginx git ufw

# --------------------------------------------------
# Step 2: Install Node.js and PM2
# --------------------------------------------------

# We will use NodeSource to install a modern version of Node.js (Node.js 20.x)
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y nodejs

# Verify installation
node -v
npm -v

# Install PM2, a process manager for Node.js applications.
# This will keep your app running forever and restart it if it crashes.
sudo npm install pm2 -g

# --------------------------------------------------
# Step 3: Install and Configure MariaDB
# --------------------------------------------------

# 1. Install the MariaDB server package
sudo apt install -y mariadb-server

# 2. Run the secure installation script.
# This will guide you through setting a root password and other security settings.
sudo mysql_secure_installation
# --- Prompts and Recommended Answers: ---
# - Enter current password for root (enter for none): Press Enter
# - Switch to unix_socket authentication [Y/n]: n (Crucial for remote access)
# - Set root password? [Y/n]: Y, then enter a strong password.
# - Remove anonymous users? [Y/n]: Y
# - Disallow root login remotely? [Y/n]: n (Important for remote management)
# - Remove test database and access to it? [Y/n]: Y
# - Reload privilege tables now? [Y/n]: Y

# 3. Configure MariaDB to listen on all IP addresses for remote connections.
#    Open the configuration file with a text editor:
sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf
#    Inside the file, find the line `bind-address = 127.0.0.1` and
#    put a `#` at the beginning to comment it out, so it looks like this:
#    #bind-address = 127.0.0.1
#    Save the file and exit (Ctrl+X, then Y, then Enter).

# 4. Log in to MariaDB as the root user to set up your database.
sudo mysql -u root -p

# --- Run the following commands inside the MariaDB prompt ---

# 1. Create a database for your application.
CREATE DATABASE crafternodes;

# 2. Create a dedicated user for your application that can connect from localhost.
#    Replace 'your_strong_password' with the password you want for this user.
CREATE USER 'crafteruser'@'localhost' IDENTIFIED BY 'your_strong_password';

# 3. Grant privileges to the localhost user.
GRANT ALL PRIVILEGES ON crafternodes.* TO 'crafteruser'@'localhost';

# 4. Now, create the same user, but allow it to connect from any remote IP ('%').
#    This is the user your remote tool (HeidiSQL) and deployed app will use.
GRANT ALL PRIVILEGES ON crafternodes.* TO 'crafteruser'@'%' IDENTIFIED BY 'your_strong_password';

# 5. Apply the changes and exit.
FLUSH PRIVILEGES;
EXIT;

# --- End of MariaDB prompt commands ---

# 5. Restart MariaDB to apply the configuration changes.
sudo systemctl restart mariadb


# --------------------------------------------------
# Step 4: Configure Firewall
# --------------------------------------------------

# It is crucial to configure the firewall to allow the necessary traffic.

# 1. Allow OpenSSH so you don't get locked out of your server.
sudo ufw allow 'OpenSSH'

# 2. Allow Nginx HTTP and HTTPS traffic.
sudo ufw allow 'Nginx Full'

# 3. Allow remote connections to the MariaDB port.
sudo ufw allow 3306/tcp

# 4. Enable the firewall.
sudo ufw enable
# (Press 'y' and Enter to confirm)

# You can check the status of your firewall at any time with:
sudo ufw status


# --------------------------------------------------
# Step 5: Clone and Build Your Application
# --------------------------------------------------

# Clone your project from your Git repository
git clone https://github.com/Just-Cole/CrafterNodes.com.git
cd CrafterNodes.com

# Install project dependencies
npm install

# Create and fill in your .env.local file for production secrets.
# IMPORTANT: You must fill this file with your actual secrets.
cat > .env.local << EOF
# Database
# Use the credentials for the 'crafteruser' you created in Step 3.
# The format is: mysql://user:password@host:port/database
# The host should be your server's public IP address or 127.0.0.1
DATABASE_URL="mysql://crafteruser:your_strong_password@127.0.0.1:3306/crafternodes"

# SteamGridDB
STEAMGRIDDB_API_KEY=your_steamgriddb_api_key

# Pterodactyl Environment Variables
PTERODACTYL_PANEL_URL=https://your.pterodactyl.panel
PTERODACTYL_API_KEY=your_pterodactyl_application_api_key

# Stripe Environment Variables
STRIPE_SECRET_KEY=your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key

# NextAuth Environment Variables
NEXTAUTH_SECRET=generate_a_strong_secret_here # You can generate one with `openssl rand -base64 32`
NEXTAUTH_URL=https://your-domain.com

# Discord OAuth Environment Variables
DISCORD_CLIENT_ID=your_discord_client_id
DISCORD_CLIENT_SECRET=your_discord_client_secret
EOF

# Build your Next.js app for production
npm run build

# --------------------------------------------------
# Step 6: Create Application Tables
# --------------------------------------------------

# With your firewall configured, you should now be able to connect with HeidiSQL.
# 1. Connect to your database using HeidiSQL (Server IP, 'crafteruser', your password).
# 2. Open the "Query" tab.
# 3. Copy, paste, and run the SQL commands below to create the app's tables.

CREATE TABLE `games` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `image` varchar(255) NOT NULL,
  `hint` varchar(255) NOT NULL,
  `pterodactylNestId` int(11) NOT NULL,
  `pterodactylEggId` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `plans` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `game_id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `price` varchar(255) NOT NULL,
  `priceId` varchar(255) DEFAULT NULL,
  `features` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`features`)),
  `icon` varchar(255) DEFAULT NULL,
  `popular` tinyint(1) DEFAULT 0,
  PRIMARY KEY (`id`),
  KEY `game_id` (`game_id`),
  CONSTRAINT `plans_ibfk_1` FOREIGN KEY (`game_id`) REFERENCES `games` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


# --------------------------------------------------
# Step 7: Run the Application with PM2
# --------------------------------------------------

# Start the Next.js application using PM2.
# This will start the app on port 3000 by default.
pm2 start npm --name "next-app" -- start

# Tell PM2 to start on system boot
pm2 startup
# (You will need to run the command PM2 gives you here)

# Save the current process list
pm2 save

# --------------------------------------------------
# Step 8: Configure Nginx as a Reverse Proxy
# --------------------------------------------------

# Create a new Nginx configuration file for your site.
# Replace 'your-domain.com' with your actual domain name.
sudo nano /etc/nginx/sites-available/your-domain.com

# Paste the following configuration into the file.
# Replace 'your-domain.com' with your actual domain.
server {
    listen 80;
    server_name your-domain.com www.your-domain.com;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}


# Enable the new configuration by creating a symbolic link
sudo ln -s /etc/nginx/sites-available/your-domain.com /etc/nginx/sites-enabled/

# Test the Nginx configuration for syntax errors
sudo nginx -t

# Restart Nginx to apply the changes
sudo systemctl restart nginx

# --------------------------------------------------
# Step 9: Secure Your Site with SSL (Let's Encrypt)
# --------------------------------------------------

# Install Certbot, the client for Let's Encrypt
sudo apt install -y certbot python3-certbot-nginx

# Obtain and install the SSL certificate.
# Replace 'your-domain.com' with your domain.
sudo certbot --nginx -d your-domain.com -d www.your-domain.com

# Certbot will ask for your email and to agree to the terms of service.
# It will then automatically configure SSL for you.

# --------------------------------------------------
# Step 10: Updating Your Application
# --------------------------------------------------

# To update your live application with changes from your Git repository:

# 1. Navigate to your project directory:
cd ~/CrafterNodes.com

# 2. Pull the latest changes from your main branch
git pull

# 3. Install any new dependencies
npm install

# 4. Re-build the application
npm run build

# 5. Restart the app with PM2 to apply the changes
pm2 restart next-app

# --------------------------------------------------
# Step 11: Troubleshooting
# --------------------------------------------------

# **Error: `connect ETIMEDOUT` when connecting to the database**
# This error means your application is trying to connect, but a firewall is blocking it.
# You must check TWO firewalls:

# 1. **Cloud Provider Firewall (Most Common Issue):**
#    - Log in to your cloud provider's website (Vultr, DigitalOcean, AWS, etc.).
#    - Find the "Networking" or "Firewall" section for your server.
#    - **You MUST add a new rule to ALLOW inbound traffic on TCP Port 3306 from all IPs (0.0.0.0/0).**
#    - This is the most common reason for a timeout error.

# 2. **Server's Firewall (UFW):**
#    - Ensure you have run the `sudo ufw allow 3306/tcp` command from Step 4.
#    - To temporarily test if UFW is the problem, you can disable it with `sudo ufw disable`.
#    - If the connection works after disabling it, you know the UFW rule is wrong.
#    - **Remember to re-enable it** with `sudo ufw enable` afterwards for security.


# --------------------------------------------------
# How to Uninstall
# --------------------------------------------------

# This section provides the steps to remove the application and its components.

# 1. Stop and remove the application from PM2
pm2 stop next-app
pm2 delete next-app
pm2 save
pm2 unstartup

# 2. Remove the Nginx configuration and SSL certificate
#    Replace 'your-domain.com' with your actual domain name.
sudo rm /etc/nginx/sites-enabled/your-domain.com
sudo rm /etc/nginx/sites-available/your-domain.com
sudo certbot delete --cert-name your-domain.com
sudo systemctl restart nginx

# 3. Remove the application files
cd ~
rm -rf CrafterNodes.com

# 4. Revert firewall changes
sudo ufw delete allow 'Nginx Full'
sudo ufw delete allow 3306/tcp

# 5. Remove the database and user
#    Log in to MariaDB as the root user.
sudo mysql -u root -p
#    --- Run the following commands inside the MariaDB prompt ---
DROP DATABASE crafternodes;
DROP USER 'crafteruser'@'localhost';
DROP USER 'crafteruser'@'%';
FLUSH PRIVILEGES;
EXIT;
#    --- End of MariaDB prompt commands ---

# 6. (Optional) Uninstall the main packages if no longer needed
# sudo apt purge -y nginx nginx-common certbot python3-certbot-nginx
# sudo apt purge -y nodejs
# sudo apt purge -y mariadb-server
# sudo npm uninstall -g pm2
# sudo apt autoremove -y



    